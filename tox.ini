[tox]
envlist =
  test-py{39,310,311,312,313,314}
  docs
  lint
  lintclient
  type
  notebook
skip_missing_interpreters = true
toxworkdir = {toxinidir}/build/tox

[testenv]
passenv = PYTEST_*,COVERAGE_*,DICOMWEB_TEST_*,REDIS_TEST_*,GIRDER_BUILD_OPTIONS,PIP_*,CFLAGS,LARGE_IMAGE_*,_JAVA_OPTIONS,GIRDER_CLIENT_TESTING_MONGO_URI,HEADLESS
extras =
  memcached
  redis
  performance
setenv =
  PIP_FIND_LINKS=https://girder.github.io/large_image_wheels
  GDAL_PAM_ENABLED=no
  GDAL_HTTP_MAX_RETRY=5
  GDAL_HTTP_RETRY_DELAY=5

[testenv:test]
passenv = {[testenv]passenv}
description = Run all tests, including Girder
deps =
  -rrequirements-test.txt
  coverage
  mock
  pooch
  pytest
  pytest-cov
  pytest-asyncio
  pytest-custom-exit-code
  pytest-girder>=5.0.0a13
  pytest-rerunfailures
  pytest-xdist
allowlist_externals =
  rm
  npm
commands =
  rm -rf build/test/coverage/web_temp
  npm --prefix {toxinidir}/girder/girder_large_image/web_client run test
  pytest --numprocesses 0 -m 'singular' --cov-config tox.ini --suppress-no-test-exit-code {posargs}
  pytest --numprocesses {env:PYTEST_NUMPROCESSES:logical} -m 'not singular and not notebook' --cov-config tox.ini --cov-append --suppress-no-test-exit-code {posargs}
# Reduce npm chatter
setenv =
  NPM_CONFIG_FUND=false
  NPM_CONFIG_AUDIT=false
  NPM_CONFIG_AUDIT_LEVEL=high
  NPM_CONFIG_LOGLEVEL=warn
  NPM_CONFIG_PROGRESS=false
  NPM_CONFIG_PREFER_OFFLINE=true
  PIP_FIND_LINKS=https://girder.github.io/large_image_wheels
  PIP_PREFER_BINARY=1
  GDAL_PAM_ENABLED=no
  GDAL_HTTP_MAX_RETRY=5
  GDAL_HTTP_RETRY_DELAY=5

# Versions that do have all tile sources.  Using the requirements-dev.txt file
# installs in editable mode, which then includes results in coverage.
[testenv:test-py{39,310,311,312,313,314}]
# Don't package for tests where we use editable modes
package = editable
passenv = {[testenv:test]passenv}
extras = {[testenv:test]extras}
deps =
  -rrequirements-girder5.txt
  -rrequirements-dev.txt
  coverage
  mock
  pooch
  pytest
  pytest-cov
  pytest-asyncio
  pytest-custom-exit-code
  pytest-girder>=5.0.0a13
  pytest-rerunfailures
  pytest-xdist
allowlist_externals = {[testenv:test]allowlist_externals}
# commands_pre = {[testenv:test]commands_pre}
commands = {[testenv:test]commands}
setenv = {[testenv:test]setenv}

[testenv:server]
description = Run all tests except Girder client
deps = {[testenv:test]deps}
commands =
  pytest --numprocesses 0 -m 'singular and not girder_client' --cov-config tox.ini --suppress-no-test-exit-code {posargs}
  pytest --numprocesses {env:PYTEST_NUMPROCESSES:logical} -m 'not singular and not girder_client' --cov-config tox.ini --cov-append --suppress-no-test-exit-code {posargs}

[testenv:server-py{39,310,311,312,313,314}]
deps = {[testenv:server]deps}
commands = {[testenv:server]commands}

# For running just one test, it is often clearer to do
#  tox -e <env> -- --numprocesses 0 --no-cov -k <test name>
# Further, for full tests, you can skip doing an actual build by passing the
# GIRDER_BUILD_OPTIONS environment variable, such as
#  GIRDER_BUILD_OPTIONS=--help tox -e <env> -- --numprocesses 0 --no-cov -k <test name>
# Another way to accomplish this is to just run pytest in the tox environment
#  GDAL_PAM_ENABLED=no build/tox/test-py311/bin/pytest --no-cov -k <test name>
[testenv:core]
description = Run core tests.  This is all but Girder
deps =
  -rrequirements-test-core.txt
  coverage
  mock
  pooch
  pytest
  pytest-cov
  pytest-asyncio
  pytest-custom-exit-code
  pytest-rerunfailures
  pytest-xdist
commands =
  pytest --numprocesses 0 -m 'singular and not girder' --cov-config tox.ini --suppress-no-test-exit-code {posargs}
  pytest --numprocesses {env:PYTEST_NUMPROCESSES:logical} -m 'not singular and not girder and not notebook' --cov-config tox.ini --cov-append --suppress-no-test-exit-code {posargs}

[testenv:core-py{39,310,311,312,313,314}]
deps = {[testenv:core]deps}
commands = {[testenv:core]commands}

[testenv:notebook]
description = Run tests on notebooks
deps =
  ipykernel
  nbconvert
  nbformat
  pooch
  pytest
  pytest-cov
  pytest-custom-exit-code
  pytest-rerunfailures
  pytest-xdist
commands =
  pytest --numprocesses 0 -m 'notebook' --no-cov --suppress-no-test-exit-code test/test_notebooks.py {posargs}
setenv =
  PIP_FIND_LINKS=https://girder.github.io/large_image_wheels
  PIP_PREFER_BINARY=1
  GDAL_PAM_ENABLED=no
  GDAL_HTTP_MAX_RETRY=5
  GDAL_HTTP_RETRY_DELAY=5
  JUPYTER_PLATFORM_DIRS=1

[testenv:lint]
description = Lint python code
skipsdist = true
skip_install = true
deps =
  flake8
  flake8-bugbear
  flake8-docstrings
  flake8-isort
  flake8-quotes
  ruff
  yamlfix
allowlist_externals =
  find
commands =
  ruff check large_image sources utilities girder girder_annotation examples docs test
  flake8
  find . \( -name '*.yaml' -o -name '*.yml' \) -not -path './build/*' -not -path '*/node_modules/*' -exec yamlfix -c pyproject.toml --check {} \+

[testenv:type]
description = Check python types
skipsdist = true
deps =
  -rrequirements-dev.txt
  mypy
  types-cachetools
  types-pillow
  types-psutil
commands =
  mypy --config-file tox.ini {posargs}

[testenv:type-py{39,310,311,312,313,314}]
description = {[testenv:type]description}
skipsdist = true
deps = {[testenv:type]deps}
commands = {[testenv:type]commands}

[testenv:flake8]
description = Lint python code
skipsdist = true
skip_install = true
deps =
  flake8
  flake8-bugbear
  flake8-docstrings
  flake8-isort
  flake8-quotes
commands =
  flake8 {posargs}

[testenv:ruff]
description = Lint python code
skipsdist = true
skip_install = true
deps =
  ruff
commands =
  ruff check large_image sources utilities girder girder_annotation examples docs test {posargs}

[testenv:format]
description = Autoformat import order and autopep8
skipsdist = true
skip_install = true
base_python=python3.9
deps =
  autopep8
  isort
  unify
  ruff
  yamlfix
allowlist_externals =
  find
commands =
  isort .
  autopep8 -ria large_image sources utilities girder girder_annotation examples docs test
  unify --in-place --recursive large_image sources utilities girder girder_annotation examples docs test
  ruff check large_image sources utilities girder girder_annotation examples docs test --fix
  find . \( -name '*.yaml' -o -name '*.yml' \) -not -path './build/*' -not -path '*/node_modules/*' -exec yamlfix -c pyproject.toml {} \+

[testenv:lintclient]
description = Lint the girder large_image plugin client
skip_install = true
deps =
allowlist_externals =
  npm
commands =
  npm --prefix {toxinidir}/girder/girder_large_image/web_client install --no-package-lock
  npm --prefix {toxinidir}/girder_annotation/girder_large_image_annotation/web_client install --no-package-lock
  npm --prefix {toxinidir}/sources/dicom/large_image_source_dicom/web_client install --no-package-lock
  npm --prefix {toxinidir}/girder/girder_large_image/web_client run lint
  npm --prefix {toxinidir}/girder_annotation/girder_large_image_annotation/web_client run lint
  npm --prefix {toxinidir}/sources/dicom/large_image_source_dicom/web_client run lint

[testenv:formatclient]
description = Autoformat client
skip_install = true
deps =
allowlist_externals =
  npm
commands =
  npm --prefix {toxinidir}/girder/girder_large_image/web_client install --no-package-lock
  npm --prefix {toxinidir}/girder_annotation/girder_large_image_annotation/web_client install --no-package-lock
  npm --prefix {toxinidir}/sources/dicom/large_image_source_dicom/web_client install --no-package-lock
  npm --prefix {toxinidir}/girder/girder_large_image/web_client run format
  npm --prefix {toxinidir}/girder_annotation/girder_large_image_annotation/web_client run format
  npm --prefix {toxinidir}/sources/dicom/large_image_source_dicom/web_client run format

# You can use "tox devenv -e dev <venv path>" to create a development
# environment.  This will only work on python base versions that support all
# large_image packages.
[testenv:dev]
description = Setup dev environment
usedevelop = true
deps = -rrequirements-dev.txt
commands =
  pip freeze

[testenv:dev-osx]
description = {[testenv:dev]description}
use_deveop = {[testenv:dev]use_deveop}
deps = -rrequirements-dev-osx.txt
commands = {[testenv:dev]commands}

[testenv:dev-py{39,310,311,312,313,314}]
usedevelop = true
deps = {[testenv:dev]deps}
commands = {[testenv:dev]commands}

[testenv:dev-osx-py{39,310,311,312,313,314}]
usedevelop = true
deps = {[testenv:dev-osx]deps}
commands = {[testenv:dev-osx]commands}

[testenv:docs]
description = Build documentation
# Pin sphinx until nbsphinx is updated
deps =
  -rrequirements-test.txt
  jupyter
  linkchecker
  nbsphinx
  pypandoc
  sphinx
  sphinx-rtd-theme
  sphinxcontrib-jquery
  sphinxcontrib-mermaid
  pooch
changedir = {toxinidir}/docs
allowlist_externals =
  make_docs.sh
commands =
  ./make_docs.sh
  linkchecker "{toxinidir}/build/docs/index.html"

[testenv:compare]
description = Compare inputs with different sources
passenv = PIP_*
setenv =
  PIP_FIND_LINKS={env:PIP_FIND_LINKS:https://girder.github.io/large_image_wheels}
  PIP_PREFER_BINARY=1
  GDAL_PAM_ENABLED=no
  GDAL_HTTP_MAX_RETRY=5
  GDAL_HTTP_RETRY_DELAY=5
deps =
  -rrequirements-test-core.txt
  pooch
commands =
  python -c "import test.datastore;test.datastore.fetch_all()"
  python {toxinidir}/test/lisource_compare.py --all build/tox/externaldata/* 'https://data.kitware.com/api/v1/file/hashsum/sha512/5e56cdb8fb1a02615698a153862c10d5292b1ad42836a6e8bce5627e93a387dc0d3c9b6cfbd539796500bc2d3e23eafd07550f8c214e9348880bbbc6b3b0ea0c/download' test/test_files/rgb*.tiff --projection= --projection=EPSG:3857 --yaml=build/tox/compare.yaml --out=build/tox/compare.txt

[testenv:compare-py{39,310,311,312,313,314}]
description = {[testenv:compare]description}
passenv = {[testenv:compare]passenv}
setenv = {[testenv:compare]setenv}
deps = {[testenv:compare]deps}
commands = {[testenv:compare]commands}

[isort]
line_length = 100
wrap_length = 79

[flake8]
max-line-length = 100
show-source = True
format = pylint
max-complexity = 14
exclude =
  build
  docs
  .venv
  .direnv
  */web_client/*
  */*egg*/*
# Ignore missing docstring errors.
ignore = D100,D101,D102,D103,D104,D105,D106,D107,D200,D205,D400,D401,E741,W504,B017,C408,G002,G004
per-file-ignores = docs/*.py: E501

[pytest]
addopts = --verbose --strict-markers --showlocals --cov-report="term" --cov-report="xml" --cov-report="html" --cov --ignore test/utils
# --cov-context=test
cache_dir = build/pytest_cache
testpaths =
  test
  girder/test_girder
  girder_annotation/test_annotation
  # Note: for local testing, be sure to have DICOMWEB_TEST_URL set
  sources/dicom/test_dicom
markers =
  singular: mark a test to run in a non-parallel environment.
  girder: mark a test as requiring girder
  girder_client: mark a test as requiring girder client
  notebook: mark a test as for jupyter notebooks
  plugin: use by girder to load plugins
# Some of these warnings are filtered by their own packages (e.g., the numpy
# warnings), and pytest shows them anyway unless they are listed here.  Others,
# such as the mongo warnings, we can't do anything about as this package has no
# stake in the version of pymongo used by Girder.  The setName() deprecation
# will likely become an error in Python 3.11, but we'd expect dependent
# libraries to catch up.
filterwarnings =
  ignore::pytest.PytestUnraisableExceptionWarning
  ignore:.*count is deprecated.*:DeprecationWarning
  ignore::DeprecationWarning:.*mongo.*
  ignore::DeprecationWarning:.*cheroot.*
  ignore::UserWarning:pymongo.collection
  ignore::DeprecationWarning:bioformats.formatreader
  ignore:.*numpy.dtype size changed.*
  ignore:.*numpy.ufunc size changed.*
  ignore:.*numpy.ndarray size changed.*
  ignore:.*Unrecognized box.*:UserWarning:glymur.*
  ignore:.*SetUnitType.*not supported on this raster band.*
  ignore::pytest.PytestUnhandledThreadExceptionWarning:cachetools.*
  ignore:::celery.backends.amqp
  ignore:Creating a LegacyVersion.*:DeprecationWarning
  ignore:setName\(\) is deprecated, set the name attribute instead:DeprecationWarning
asyncio_default_fixture_loop_scope = function

[coverage:paths]
# As of pytest-cov 2.6, all but the first source line is relative to the first
# source line.  The first line is relative to the local path.  Prior to 2.6,
# all lines were relative to the local path.
source =
  large_image
  ../examples
  ../girder/girder_large_image
  ../girder_annotation/girder_large_image_annotation
  ../sources
  ../utilities/converter
  ../utilities/tasks

[coverage:run]
data_file = build/coverage/.coverage
branch = True
omit =
  test/*
  sources/dicom/test_dicom/*
include =
  large_image/*
  examples/*
  girder/girder_large_image/*
  girder_annotation/girder_large_image_annotation/*
  sources/*
  utilities/converter/*
  utilities/tasks*
parallel = True

[coverage:html]
directory = build/test/artifacts/python_coverage
title = Large image Coverage Report
# show_contexts = True

[coverage:xml]
output = build/test/coverage/py_coverage.xml

[mypy]
python_version = 3.9
install_types = true
non_interactive = true
ignore_missing_imports = true

follow_imports = silent

# Turn these all to true as we can
strict = True

# Start off with these
warn_unused_configs = True
warn_redundant_casts = True
warn_unused_ignores = True

# Getting these passing should be easy
strict_equality = True
strict_concatenate = True

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = True

# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_subclassing_any = True
disallow_untyped_decorators = True
disallow_any_generics = False

# These next few are various gradations of forcing use of type annotations
disallow_untyped_calls = False
disallow_incomplete_defs = False
disallow_untyped_defs = False

# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = False

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = False

files =
  large_image/
# sources/,
# girder/,
# girder_annotation/,
# utilities/
exclude = (?x)(
  (^|/)build/
  | (^|/)docs/
  | (^|/)examples/
  | (^|/).*\.egg-info/
  | (^|/)setup\.py$
  | (^|/)test/
  | (^|/)test_.*/
  )

[yamlfix]
line_length = 200
preserve_quotes = True
sequence_style = YamlNodeStyle = YamlNodeStyle.BLOCK_STYLE
